Description: >
  A project to show php information using phpinfo() function
Parameters:
  Cluster:
    Description: Please provide the ECS Cluster ID that this service should run on
    Type: String
  DesiredCount:
    Description: How many instances of this task should we run across our cluster?
    Type: Number
    Default: 1
  Listener:
    Description: The Application Load Balancer listener to register with
    Type: String
  HTTPSListener:
    Description: The Application Load Balancer HTTPS listener to register with
    Type: String
  TargetGroup:
    Description: HTTP Target group for Load Balancer
    Type: String
  HTTPSTargetGroup:
    Description: HTTPS Target group for Load Balancer
    Type: String
  Path:
    Description: The path to register with the Application Load Balancer
    Type: String
    Default: /
  ECSServiceAutoScalingRoleARN:
    Description: The ECS service auto scaling role ARN
    Type: String
  OpenRestyImage:
    Description: The OpenResty URL from ECR
    Type: String
  PHPImage:
    Description: The PHP URL from ECR
    Type: String

Resources:
  #HTTP Service
  Service:
    Type: AWS::ECS::Service
    DependsOn: ListenerRule
    Properties:
      Cluster: !Ref Cluster
      Role: !Ref ServiceRole
      DesiredCount: !Ref DesiredCount
      TaskDefinition: !Ref TaskDefinition
      DeploymentConfiguration:
        MaximumPercent: 150
        MinimumHealthyPercent: 100
      PlacementConstraints:
        - Type: distinctInstance
      LoadBalancers:
        - ContainerName: web
          ContainerPort: 80
          TargetGroupArn: !Ref TargetGroup

  #HTTPS Service
  HTTPSService:
    Type: AWS::ECS::Service
    DependsOn: HTTPSListenerRule
    Properties:
      Cluster: !Ref Cluster
      Role: !Ref ServiceRole
      DesiredCount: !Ref DesiredCount
      TaskDefinition: !Ref HTTPSTaskDefinition
      DeploymentConfiguration:
        MaximumPercent: 150
        MinimumHealthyPercent: 100
      PlacementConstraints:
        - Type: distinctInstance
      LoadBalancers:
        - ContainerName: web
          ContainerPort: 443
          TargetGroupArn: !Ref HTTPSTargetGroup

  TaskDefinition:
    Type: AWS::ECS::TaskDefinition
    Properties:
      Family: !Join ['', [!Ref 'AWS::StackName', -td]]
      TaskRoleArn: !Ref TaskRole
      ContainerDefinitions:
      # PHP Image
      - Name: php-fpm
        Essential: true
        Image: !Ref PHPImage
        Memory: 256
        LogConfiguration:
            LogDriver: awslogs
            Options:
              awslogs-group: !Ref CloudWatchLogsGroup
              awslogs-region: !Ref AWS::Region
        MountPoints:
        - ContainerPath: /var/www/html
          SourceVolume: ServicesNginxSrc
      # Openresty Image
      - Name: web
        Essential: true
        Image: !Ref OpenRestyImage
        Memory: 256
        MountPoints:
        - ContainerPath: /var/www/html
          SourceVolume: ServicesNginxSrc
        PortMappings:
          - ContainerPort: 80
            HostPort: 80
        LogConfiguration:
            LogDriver: awslogs
            Options:
              awslogs-group: !Ref CloudWatchLogsGroup
              awslogs-region: !Ref AWS::Region
        Links:
          - php-fpm
      Volumes:
        - Name: ServicesNginxSrc

  # Task definition for HTTPS Service
  HTTPSTaskDefinition:
    Type: AWS::ECS::TaskDefinition
    Properties:
      Family: !Join ['', [!Ref 'AWS::StackName', https-td]]
      TaskRoleArn: !Ref TaskRole
      ContainerDefinitions:
      # PHP Image
      - Name: php-fpm
        Essential: true
        Image: !Ref PHPImage
        Memory: 256
        LogConfiguration:
            LogDriver: awslogs
            Options:
              awslogs-group: !Ref CloudWatchLogsGroup
              awslogs-region: !Ref AWS::Region
        MountPoints:
        - ContainerPath: /var/www/html
          SourceVolume: ServicesNginxSrc
      # Openresty Image
      - Name: web
        Essential: true
        Image: !Ref OpenRestyImage
        Memory: 256
        MountPoints:
        - ContainerPath: /var/www/html
          SourceVolume: ServicesNginxSrc
        PortMappings:
          - ContainerPort: 443
            HostPort: 443
        LogConfiguration:
            LogDriver: awslogs
            Options:
              awslogs-group: !Ref CloudWatchLogsGroup
              awslogs-region: !Ref AWS::Region
        Links:
          - php-fpm
      Volumes:
        - Name: ServicesNginxSrc

  CloudWatchLogsGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Ref AWS::StackName
      RetentionInDays: 1

  ListenerRule:
    Type: AWS::ElasticLoadBalancingV2::ListenerRule
    Properties:
      ListenerArn: !Ref Listener
      Priority: 1
      Conditions:
        - Field: path-pattern
          Values:
            - !Ref Path
      Actions:
        - TargetGroupArn: !Ref TargetGroup
          Type: forward

  # HTTPS Listener Rule
  HTTPSListenerRule:
    Type: AWS::ElasticLoadBalancingV2::ListenerRule
    Properties:
      ListenerArn: !Ref HTTPSListener
      Priority: 1
      Conditions:
        - Field: path-pattern
          Values:
            - !Ref Path
      Actions:
        - TargetGroupArn: !Ref HTTPSTargetGroup
          Type: forward

  # This IAM Role grants the service access to register/unregister with the
  # Application Load Balancer (ALB). It is based on the default documented here:
  # http://docs.aws.amazon.com/AmazonECS/latest/developerguide/service_IAM_role.html
  ServiceRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub ecs-service-${AWS::StackName}
      Path: /
      AssumeRolePolicyDocument: |
        {
            "Statement": [{
                "Effect": "Allow",
                "Principal": { "Service": [ "ecs.amazonaws.com","application-autoscaling.amazonaws.com" ]},
                "Action": [ "sts:AssumeRole" ]
            }]
        }
      Policies:
        - PolicyName: !Sub ecs-service-${AWS::StackName}
          PolicyDocument:
            {
              "Version": "2012-10-17",
              "Statement":
                [
                  {
                    "Effect": "Allow",
                    "Action":
                      [
                        "ec2:AuthorizeSecurityGroupIngress",
                        "ec2:Describe*",
                        "elasticloadbalancing:DeregisterInstancesFromLoadBalancer",
                        "elasticloadbalancing:Describe*",
                        "elasticloadbalancing:RegisterInstancesWithLoadBalancer",
                        "elasticloadbalancing:DeregisterTargets",
                        "elasticloadbalancing:DescribeTargetGroups",
                        "elasticloadbalancing:DescribeTargetHealth",
                        "elasticloadbalancing:RegisterTargets",
                        "ecs:DescribeServices",
                        "ecs:UpdateService"
                      ],
                    "Resource": "*"
                  }
                ]
            }


  # Task Role
  TaskRole:
    Type: AWS::IAM::Role
    Properties:
      Path: /
      AssumeRolePolicyDocument: |
        {
          "Statement": [{
            "Action": "sts:AssumeRole",
            "Effect": "Allow",
            "Principal": { "Service": "ecs-tasks.amazonaws.com" }
          }]
        }

  ServiceScalableTarget:
    Type: 'AWS::ApplicationAutoScaling::ScalableTarget'
    Properties:
      MaxCapacity: 5
      MinCapacity: 5
      ResourceId: !Join
        - /
        - - service
          - !Ref Cluster
          - !GetAtt Service.Name
      RoleARN: !Ref ECSServiceAutoScalingRoleARN
      ScalableDimension: ecs:service:DesiredCount
      ServiceNamespace: ecs

  ServiceScaleOutPolicy:
    Type: "AWS::ApplicationAutoScaling::ScalingPolicy"
    Properties:
      PolicyName: ServiceScaleOutPolicy
      PolicyType: StepScaling
      ScalingTargetId: !Ref ServiceScalableTarget
      StepScalingPolicyConfiguration:
        AdjustmentType: ChangeInCapacity
        Cooldown: 60
        MetricAggregationType: Average
        StepAdjustments:
          - MetricIntervalLowerBound: 0
            ScalingAdjustment: 1

  ServiceScaleInPolicy:
    Type: "AWS::ApplicationAutoScaling::ScalingPolicy"
    Properties:
      PolicyName: ServiceScaleInPolicy
      PolicyType: StepScaling
      ScalingTargetId: !Ref ServiceScalableTarget
      StepScalingPolicyConfiguration:
        AdjustmentType: ChangeInCapacity
        Cooldown: 60
        MetricAggregationType: Average
        StepAdjustments:
          - MetricIntervalUpperBound: 0
            ScalingAdjustment: -1

  CPUScaleOutAlarm:
    Type: AWS::CloudWatch::Alarm
    Properties:
      AlarmName: CPU utilization greater than 75%
      AlarmDescription: Alarm if cpu utilization greater than 75% of reserved cpu
      Namespace: AWS/ECS
      MetricName: CPUUtilization
      Dimensions:
        - Name: ClusterName
          Value: !Ref Cluster
        - Name: ServiceName
          Value: !GetAtt Service.Name
      Statistic: Maximum
      Period: "60"
      EvaluationPeriods: "1"
      Threshold: "75"
      ComparisonOperator: GreaterThanThreshold
      ActionsEnabled: true
      AlarmActions:
        - !Ref ServiceScaleOutPolicy

  CPUScaleInAlarm:
    Type: AWS::CloudWatch::Alarm
    Properties:
      AlarmName: CPU utilization less than 40%
      AlarmDescription: Alarm if cpu utilization less than 40% of reserved cpu
      Namespace: AWS/ECS
      MetricName: CPUUtilization
      Dimensions:
        - Name: ClusterName
          Value: !Ref Cluster
        - Name: ServiceName
          Value: !GetAtt Service.Name
      Statistic: Maximum
      # 20 minutes
      Period: "1200"
      EvaluationPeriods: "1"
      Threshold: "40"
      ComparisonOperator: LessThanThreshold
      ActionsEnabled: true
      AlarmActions:
        - !Ref ServiceScaleInPolicy

########################################
##############HTTPS#####################
########################################

  #HTTPS Service Scalable Target
  HTTPSServiceScalableTarget:
    Type: 'AWS::ApplicationAutoScaling::ScalableTarget'
    Properties:
      MaxCapacity: 5
      MinCapacity: 5
      ResourceId: !Join
        - /
        - - service
          - !Ref Cluster
          - !GetAtt HTTPSService.Name
      RoleARN: !Ref ECSServiceAutoScalingRoleARN
      ScalableDimension: ecs:service:DesiredCount
      ServiceNamespace: ecs

  #HTTPS Service ScaleOut Policy
  HTTPSServiceScaleOutPolicy:
    Type: "AWS::ApplicationAutoScaling::ScalingPolicy"
    Properties:
      PolicyName: HTTPSServiceScaleOutPolicy
      PolicyType: StepScaling
      ScalingTargetId: !Ref HTTPSServiceScalableTarget
      StepScalingPolicyConfiguration:
        AdjustmentType: ChangeInCapacity
        Cooldown: 60
        MetricAggregationType: Average
        StepAdjustments:
          - MetricIntervalLowerBound: 0
            ScalingAdjustment: 1

  #HTTPS Service ScaleIn Policy
  HTTPSServiceScaleInPolicy:
    Type: "AWS::ApplicationAutoScaling::ScalingPolicy"
    Properties:
      PolicyName: HTTPSServiceScaleInPolicy
      PolicyType: StepScaling
      ScalingTargetId: !Ref HTTPSServiceScalableTarget
      StepScalingPolicyConfiguration:
        AdjustmentType: ChangeInCapacity
        Cooldown: 60
        MetricAggregationType: Average
        StepAdjustments:
          - MetricIntervalUpperBound: 0
            ScalingAdjustment: -1

  HTTPSCPUScaleOutAlarm:
    Type: AWS::CloudWatch::Alarm
    Properties:
      AlarmName: CPU utilization greater than 75% in HTTPS Service
      AlarmDescription: Alarm if cpu utilization greater than 75% of reserved cpu
      Namespace: AWS/ECS
      MetricName: CPUUtilization
      Dimensions:
        - Name: ClusterName
          Value: !Ref Cluster
        - Name: HTTPSServiceName
          Value: !GetAtt HTTPSService.Name
      Statistic: Maximum
      Period: "60"
      EvaluationPeriods: "1"
      Threshold: "75"
      ComparisonOperator: GreaterThanThreshold
      ActionsEnabled: true
      AlarmActions:
        - !Ref HTTPSServiceScaleOutPolicy

  HTTPSCPUScaleInAlarm:
    Type: AWS::CloudWatch::Alarm
    Properties:
      AlarmName: CPU utilization less than 40% in HTTPS Service
      AlarmDescription: Alarm if cpu utilization less than 40% of reserved cpu
      Namespace: AWS/ECS
      MetricName: CPUUtilization
      Dimensions:
        - Name: ClusterName
          Value: !Ref Cluster
        - Name: HTTPSServiceName
          Value: !GetAtt HTTPSService.Name
      Statistic: Maximum
      # 20 minutes
      Period: "1200"
      EvaluationPeriods: "1"
      Threshold: "40"
      ComparisonOperator: LessThanThreshold
      ActionsEnabled: true
      AlarmActions:
        - !Ref HTTPSServiceScaleInPolicy
